@page "/planningpoker/{gamecode}"

@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject HttpClient Http

@implements IAsyncDisposable

<PageTitle>Planning Poker</PageTitle>
<style>
    

div.page-banner
{
    color: rebeccapurple;
    font-family:'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;
    font-size: 40pt;
}

div.planning-poker-container {
    background: #CCCCCC;
    display: flex;
    align-items: center;
    justify-content: center;
    flex-direction: column;
    justify-content: space-between;
    row-gap: 20px;
}

label.game-code {
    color: lightgoldenrodyellow;
    font-size: 40pt;
    font-family: Courier New, Courier, monospace;
    font-weight:bolder;
}

</style>


<div class="planning-poker-container">

<div class="page-banner">
    Welcome to Planning Poker
</div>
<div class="form-group">

    <label>Game Code: </label>
    <label class="game-code">@(_gameCode)</label>
</div>
<div class="form-group">
    <label>
        What is your Name?
        <input @bind="PlayerName" />
    </label>
</div>
<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<div class="button-box">
    <div class="grid-container">
        <button class="grid-item" @onclick="GotoJoinAsPlayer">Join As Player</button>
        <button class="grid-item" @onclick="GotoJoinAsSpectator">Join As Spectator</button>
    </div>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>

<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

</div>

@code {
    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private string? messageInput;
    private string? _gameCode;
    const int MAX_PLAYERS = 8;

    [Parameter]
    public string? Gamecode
    {
        get => _gameCode;
        set => _gameCode = value;
    }


    const string PLAYER_NAME_STORAGE_KEY = "gamebox.playername";

    private string _playerName = string.Empty;
    private string PlayerName { 
        get => _playerName;
        set
        {
            _playerName = value;
            LocalStorage.SetItemAsync(PLAYER_NAME_STORAGE_KEY, PlayerName);
        }
    }


    private async Task GotoJoinAsPlayer()
    {
        var numberPlayers = await Http.GetStringAsync($"GameCoordinator/numberofplayers/{Gamecode}");
        if (int.Parse(numberPlayers) >= MAX_PLAYERS)
        {
            // Error message
        }
        await Send();
    }
    private async Task GotoJoinAsSpectator()
    {
        await Send();
    }

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(Gamecode) || Gamecode == "newgame")
        {
            Gamecode = await Http.GetStringAsync("GameCoordinator/gamecode");
        }

        // See if name has been previously used
        _playerName = await LocalStorage.GetItemAsStringAsync(PLAYER_NAME_STORAGE_KEY) ?? string.Empty;
        if (_playerName.Length >= 2)
        {
            _playerName = _playerName.Substring(1, _playerName.Length - 2);
        }

            
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/planningpokerhub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", _playerName, messageInput, _gameCode);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}